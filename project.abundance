{
    "atomType": "Molecule",
    "name": "test_dev_2",
    "x": 0,
    "y": 0,
    "uniqueID": 1743265138516,
    "ioValues": [
        {
            "name": "Input (1)",
            "ioValue": "",
            "currentEquation": null
        }
    ],
    "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "1ffc5a2f-7e16-43dd-9783-069e836ed32b",
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": "5cb52413-68d8-45f2-be2c-5e3b73d9c723",
                    "currentEquation": null
                }
            ],
            "description": "Connect geometry here to make it available in the next level up. "
        },
        {
            "atomType": "Input",
            "name": "Input (1)",
            "x": 0.025384615384615384,
            "y": 0.5271084337349398,
            "uniqueID": "0416aba2-6a1d-4c1f-a240-cf1415a78f0a",
            "ioValues": [],
            "description": "Adds an input to the parent molecule. If the parent molecule is the top level of the project then the input will be available when the project is shared or imported into another project. Name is editable",
            "type": "string"
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.20920043811610078,
            "y": 0.35240963855421686,
            "uniqueID": "816fbf61-b04c-4468-802e-d4b18fb046df",
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 100,
                    "currentEquation": null
                },
                {
                    "name": "y length",
                    "ioValue": 100,
                    "currentEquation": null
                }
            ],
            "description": "Creates a new rectangle."
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.4238773274917853,
            "y": 0.38253012048192775,
            "uniqueID": "b2239e10-993e-446f-ba73-204d4f3f4922",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "816fbf61-b04c-4468-802e-d4b18fb046df",
                    "currentEquation": null
                },
                {
                    "name": "height",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negative."
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.34501642935377874,
            "y": 0.15060240963855423,
            "uniqueID": "c1e1d29f-20cd-4ae7-bd1c-cea4f90cc2e1",
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 50,
                    "currentEquation": null
                },
                {
                    "name": "y length",
                    "ioValue": 50,
                    "currentEquation": null
                }
            ],
            "description": "Creates a new rectangle."
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.6571741511500547,
            "y": 0.14156626506024098,
            "uniqueID": "5fed3122-e3b8-4c74-9e12-e5821256dd4e",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "c1e1d29f-20cd-4ae7-bd1c-cea4f90cc2e1",
                    "currentEquation": null
                },
                {
                    "name": "height",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negative."
        },
        {
            "atomType": "Difference",
            "name": "Difference",
            "x": 0.5761226725082147,
            "y": 0.5030120481927711,
            "uniqueID": "b6cdc0a6-4b9f-4871-beca-6ee337156591",
            "ioValues": [
                {
                    "name": "geometry1",
                    "ioValue": "b2239e10-993e-446f-ba73-204d4f3f4922",
                    "currentEquation": null
                },
                {
                    "name": "geometry2",
                    "ioValue": "5fed3122-e3b8-4c74-9e12-e5821256dd4e",
                    "currentEquation": null
                }
            ],
            "description": "Subtracts shape two from shape one."
        },
        {
            "atomType": "Export",
            "name": "Export",
            "x": 0.868565169769989,
            "y": 0.7168674698795181,
            "uniqueID": "1ee1028d-8e86-46e5-a4bd-395ed336fbe4",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "b6cdc0a6-4b9f-4871-beca-6ee337156591",
                    "currentEquation": null
                },
                {
                    "name": "File Type",
                    "ioValue": "STL",
                    "currentEquation": null
                },
                {
                    "name": "Resolution (dpi)",
                    "ioValue": 96,
                    "currentEquation": null
                },
                {
                    "name": "Part Name",
                    "ioValue": "test_dev_2",
                    "currentEquation": null
                }
            ],
            "description": "Export Atom, let's you choose a type of file to Export.",
            "type": "STL",
            "resolution": 96,
            "importIndex": 0,
            "partName": "test_dev_2"
        },
        {
            "atomType": "Gcode",
            "name": "Gcode",
            "x": 0.8182683158896289,
            "y": 0.2680722891566265,
            "uniqueID": "a7b135d3-e143-4ef6-b157-4e5153aad1e4",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "9507bee5-0a33-40fe-8175-459fbaada1a1",
                    "currentEquation": null
                },
                {
                    "name": "Tool Size",
                    "ioValue": 0.25,
                    "currentEquation": null
                },
                {
                    "name": "Passes",
                    "ioValue": 3,
                    "currentEquation": null
                },
                {
                    "name": "Speed",
                    "ioValue": 1500,
                    "currentEquation": null
                },
                {
                    "name": "Cut Through",
                    "ioValue": 0.25,
                    "currentEquation": null
                },
                {
                    "name": "Part Name",
                    "ioValue": "cnc1Pass",
                    "currentEquation": null
                }
            ],
            "description": "Generates Maslow gcode from the input geometry. For single parts, generates one gcode file. For assemblies, extracts individual parts, sorts them based on the selected direction (Left, Right, Top, or Bottom) using bounding boxes, generates gcode for each part sequentially, and concatenates the results into one file.",
            "partName": "cnc1Pass",
            "sortDirection": "Left"
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.31653888280394304,
            "y": 0.7018072289156627,
            "uniqueID": "f466882f-5dfb-4349-b90e-2c0f44a9ce8e",
            "ioValues": [
                {
                    "name": "dist",
                    "ioValue": 5,
                    "currentEquation": null
                },
                {
                    "name": "height",
                    "ioValue": 10,
                    "currentEquation": null
                },
                {
                    "name": "doubly",
                    "ioValue": 20,
                    "currentEquation": null
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": "\n      Inputs = [\n       {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n      {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10},\n        {inputName: \"doubly\", type: \"string\", defaultValue: 30}\n      ]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      //Takes the address and gets the shape from the library\n      let importedShape = library[shape]\n\n      //This makes a new copy of the shape and moves it in the X direction\n      let movedShape = importedShape.geometry[0].clone().translate([dist,0,0])\n\n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Shape:\")\n      console.log(importedShape);\n\n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [movedShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n\n      //We could at this point return shape1 as a complete shape and it will be automatically written to the library for us\n      //return shape1\n\n      //We can also create a new shape from scratch\n      let createdRectangle = replicad.drawRectangle(5,7)\n      //This is the plane we are going to put our new shape on\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      //And we extrude the shape to make it 3D\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n\n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape],\n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n      //Then we can return our created shape in just the same way\n      //return shape2\n\n      //If we want to return both shapes at once, we can create an assembly with them\n      let anAssembly = {\n        geometry: [shape1, shape2],\n        tags: [\"aNewTag\"],\n        color: '#A3CF5B',\n        plane: newPlane,\n        bom: []\n      }\n\n      //And we can return that in the same way\n      return anAssembly\n\n      /**\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n      If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0]\n      Use any replicad available methods to modify your geometry. Learn more about all of the available methods at\n      https://replicad.xyz/docs/introapp/UserGuide.html\n      Return a replicad object that includes geometry, color, tags and plane.\n\n      Example Code Atom:\n        Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let finalShape = library[shape].geometry[0].clone().translate([x,0,0])\n        return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      */\n      "
        },
        {
            "atomType": "Move",
            "name": "Move",
            "x": 0.7864184008762323,
            "y": 0.42771084337349397,
            "uniqueID": "5cb52413-68d8-45f2-be2c-5e3b73d9c723",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "9507bee5-0a33-40fe-8175-459fbaada1a1",
                    "currentEquation": null
                },
                {
                    "name": "xDist",
                    "ioValue": 0,
                    "currentEquation": null
                },
                {
                    "name": "yDist",
                    "ioValue": 0,
                    "currentEquation": null
                },
                {
                    "name": "zDist",
                    "ioValue": -10,
                    "currentEquation": null
                }
            ],
            "description": "Moves a shape laterally in X, Y, Z."
        },
        {
            "atomType": "Move",
            "name": "Move",
            "x": 0.5323110624315444,
            "y": 0.7951807228915663,
            "uniqueID": "2b38312c-8a70-42dc-9658-c5bda11e9264",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "b6cdc0a6-4b9f-4871-beca-6ee337156591",
                    "currentEquation": null
                },
                {
                    "name": "xDist",
                    "ioValue": 130,
                    "currentEquation": "130"
                },
                {
                    "name": "yDist",
                    "ioValue": 0,
                    "currentEquation": null
                },
                {
                    "name": "zDist",
                    "ioValue": 0,
                    "currentEquation": null
                }
            ],
            "description": "Moves a shape laterally in X, Y, Z."
        },
        {
            "atomType": "Assembly",
            "name": "Assembly",
            "x": 0.6692223439211391,
            "y": 0.7259036144578314,
            "uniqueID": "9507bee5-0a33-40fe-8175-459fbaada1a1",
            "ioValues": [
                {
                    "name": "Shape 1",
                    "ioValue": "b6cdc0a6-4b9f-4871-beca-6ee337156591"
                },
                {
                    "name": "Shape 2",
                    "ioValue": "2b38312c-8a70-42dc-9658-c5bda11e9264"
                }
            ],
            "description": "Pick between assembly and fusion to join input geometries. Assembly takes multiple shapes together into one, shapes higher in the inputs list will cut into shapes lower on the input list where they overlap. Fusion takes all shapes or sketches and fuses them permanently into a single shape"
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "816fbf61-b04c-4468-802e-d4b18fb046df",
            "ap2ID": "b2239e10-993e-446f-ba73-204d4f3f4922"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry1",
            "ap1ID": "b2239e10-993e-446f-ba73-204d4f3f4922",
            "ap2ID": "b6cdc0a6-4b9f-4871-beca-6ee337156591"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "c1e1d29f-20cd-4ae7-bd1c-cea4f90cc2e1",
            "ap2ID": "5fed3122-e3b8-4c74-9e12-e5821256dd4e"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry2",
            "ap1ID": "5fed3122-e3b8-4c74-9e12-e5821256dd4e",
            "ap2ID": "b6cdc0a6-4b9f-4871-beca-6ee337156591"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "b6cdc0a6-4b9f-4871-beca-6ee337156591",
            "ap2ID": "1ee1028d-8e86-46e5-a4bd-395ed336fbe4"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "b6cdc0a6-4b9f-4871-beca-6ee337156591",
            "ap2ID": "2b38312c-8a70-42dc-9658-c5bda11e9264"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Shape 1",
            "ap1ID": "b6cdc0a6-4b9f-4871-beca-6ee337156591",
            "ap2ID": "9507bee5-0a33-40fe-8175-459fbaada1a1"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap1ID": "5cb52413-68d8-45f2-be2c-5e3b73d9c723",
            "ap2ID": "1ffc5a2f-7e16-43dd-9783-069e836ed32b"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Shape 2",
            "ap1ID": "2b38312c-8a70-42dc-9658-c5bda11e9264",
            "ap2ID": "9507bee5-0a33-40fe-8175-459fbaada1a1"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "9507bee5-0a33-40fe-8175-459fbaada1a1",
            "ap2ID": "5cb52413-68d8-45f2-be2c-5e3b73d9c723"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "9507bee5-0a33-40fe-8175-459fbaada1a1",
            "ap2ID": "a7b135d3-e143-4ef6-b157-4e5153aad1e4"
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}